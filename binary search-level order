#include <iostream>
#include <bits/stdc++.h>
using namespace std;
//a
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x){
        this->val=x;
        this->left=NULL;
        this->right=NULL;
    }
};

TreeNode* insert(TreeNode* root, int key) {
    if (root == nullptr) {
        return new TreeNode(key);
    }
    if (key < root->val) {
        root->left = insert(root->left, key);
    } else {
        root->right = insert(root->right, key);
    }
    return root;
}

vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> result;
    if (root == nullptr) {
        return result;
    }
    
    queue<TreeNode*> q;
    q.push(root);
    
    while (!q.empty()) {
        int levelSize = q.size();
        vector<int> level;
        
        for (int i = 0; i < levelSize; ++i) {
            TreeNode* node = q.front();
            q.pop();
            level.push_back(node->val);
            
            if (node->left) {
                q.push(node->left);
            }
            if (node->right) {
                q.push(node->right);
            }
        }
        
        result.push_back(level);
    }
    
    return result;
}

int main() {
    int T;
    cin >> T;
    
    vector<string> output;
    
    for (int t = 0; t < T; ++t) {
        int N;
        cin >> N;
        
        TreeNode* root = nullptr;
        
        for (int i = 0; i < N; ++i) {
            int val;
            cin >> val;
            root = insert(root, val);
        }
        
        vector<vector<int>> levels = levelOrder(root);
        
        for (const auto& level : levels) {
            string levelStr;
            for (int i = 0; i < level.size(); ++i) {
                if (i > 0) {
                    levelStr += " ";
                }
                levelStr += to_string(level[i]);
            }
            output.push_back(levelStr);
        }
        
        output.push_back(""); 
    }
    
    for (int i = 0; i < output.size(); ++i) {
        cout << output[i] << endl;
    }
    
    return 0;
}
