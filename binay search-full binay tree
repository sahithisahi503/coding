#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class TreeNode {
public:
    int val;
    TreeNode *left, *right;
    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

class BST {
private:
    TreeNode *root;
    TreeNode* insert(TreeNode *node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }
        if (value < node->val) {
            node->left = insert(node->left, value);
        } else {
            node->right = insert(node->right, value);
        }
        return node;
    }
    bool isFullBinaryTree(TreeNode *node) {
        if (node == nullptr) {
            return true;
        }
        if (node->left == nullptr && node->right == nullptr) {
            return true;
        }
        if (node->left != nullptr && node->right != nullptr) {
            return isFullBinaryTree(node->left) && isFullBinaryTree(node->right);
        }
        return false;
    }

public:
    BST() : root(nullptr) {}
    void insert(int value) {
        root = insert(root, value);
    }
    bool isFullBinaryTree() {
        return isFullBinaryTree(root);
    }
};

int main() {
    int T;
    cin >> T;
    
    while (T--) {
        int N;
        cin >> N;
        
        BST bst;
        for (int i = 0; i < N; ++i) {
            int value;
            cin >> value;
            bst.insert(value);
        }
        
        if (bst.isFullBinaryTree()) {
            cout << "True\n";
        } else {
            cout << "False\n";
        }
    }
    return 0;
}
